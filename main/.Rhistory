job.number = 1
load("../seed1000.rda")
set.seed(a[job.number])
setwd("..")
folder <- paste(getwd(), "/Functions/", sep="")
functions <- list.files(folder)
functions <- paste(folder, functions, sep = "")
for (i in functions){
source(i)
}
ffunction()
functions
folder <- paste(getwd(), "/Functions/", sep="")
functions <- list.files(folder)
functions <- paste(folder, functions, sep = "")
for (i in functions){
source(i)
}
setwd("main/")
# Causal Tree
# library(devtools)
# install_github("susanathey/causalTree")
library(causalTree)
coeff.prop.sc <- 0.6
N.training    <- 10^3
N.testing     <- 10^3
#####################################################################################################################
################################################# Heterogeneous #####################################################
#####################################################################################################################
data.cont.cont            <- makeData.cont.eff.cont(N             = N.training,
n.test        = N.testing,
coeff.prop.sc = coeff.prop.sc)
data.used.full.cont.cont  <- data.cont.cont$data.used
data.used.cont.cont       <- data.used.full.cont.cont[1:800, ]
# val.sample: used in EstIpw.CvMethod1, the order of the columns must be A, Y, X
data.validation.cont.cont <- data.used.full.cont.cont[801:1000, ]
# Pretend X2 is unmeasured for unmeasured cov
data.used.full.cont.cont.mis <- data.used.full.cont.cont %>%
select(-X2)
test.data.mis <- data.cont.cont$test.data %>%
select(-X2)
#####################################################################################################################
################################### True propensity score model, honest Estimation ##################################
#####################################################################################################################
t0 <- Sys.time()
tmp.propsc <- est.prop.sc(df.noy    = data.used.full.cont.cont[, !colnames(data.used.full.cont.cont) %in% c("Y")],
method    = "GLM",
form.true = "A ~ X1 + X2 + X3")
tmp.propsc$prop.sc <- ifelse(data.used.full.cont.cont$A == 1, tmp.propsc$prop.sc, 1 - tmp.propsc$prop.sc)
trtIdx  <- which(data.used.full.cont.cont$A == 1)
ctrlIdx <- which(data.used.full.cont.cont$A == 0)
train.idx <- c(sample(trtIdx, length(trtIdx) / 2),
sample(ctrlIdx, length(ctrlIdx) / 2))
train.data <- data.used.full.cont.cont[train.idx, ]
est.data   <- data.used.full.cont.cont[-train.idx, ]
ct.propsc.true.honest <- honest.causalTree(Y ~ X1 + X2 + X3 + X4 + X5 + X6,
data             = train.data,
weights          = 1 / tmp.propsc$prop.sc[train.idx],
treatment        = train.data$A,
est_data         = est.data,
est_weights      = 1 / tmp.propsc$prop.sc[-train.idx],
est_treatment    = est.data$A,
split.Rule       = "tstats",
split.Honest     = T,
HonestSampleSize = nrow(est.data),
split.Bucket     = F,
cv.option        = "matching")
cptable.propsc.true.honest <- ct.propsc.true.honest$cptable[,1][which.min(ct.propsc.true.honest$cptable[,4])]
final.tree.propsc.true.honest <- prune(ct.propsc.true.honest, cptable.propsc.true.honest)
t1 <- Sys.time()
eval.ct.propsc.true.honest <- eval.measures.eff(final.tree   = final.tree.propsc.true.honest,
test.data    = data.cont.cont$test.data,
true.trt.eff = data.cont.cont$true.trt.eff,
noise.var    = data.cont.cont$noise.var,
corr.split   = data.cont.cont$corr.split,
where.split  = data.cont.cont$where.split,
dir.split    = data.cont.cont$dir.split)
eval.ct.propsc.true.honest$t <- as.numeric(difftime(t1, t0, units = "secs"))
eval.ct.propsc.true.honest$corr.frst.splt <- as.character(ct.propsc.true.honest$frame$var[1]) == data.cont.cont$corr.split
#####################################################################################################################
############################## Misspecified propensity score model, honest estimation ###############################
#####################################################################################################################
t0 <- Sys.time()
tmp.propsc <- est.prop.sc(df.noy    = data.used.full.cont.cont.mis[, !colnames(data.used.full.cont.cont.mis) %in% c("Y")],
method    = "GLM",
form.true = "A ~ X1 + X3 + X4 + X5 + X6")
tmp.propsc$prop.sc <- ifelse(data.used.full.cont.cont.mis$A == 1, tmp.propsc$prop.sc, 1 - tmp.propsc$prop.sc)
trtIdx  <- which(data.used.full.cont.cont.mis$A == 1)
ctrlIdx <- which(data.used.full.cont.cont.mis$A == 0)
train.idx <- c(sample(trtIdx, length(trtIdx) / 2),
sample(ctrlIdx, length(ctrlIdx) / 2))
train.data <- data.used.full.cont.cont.mis[train.idx, ]
est.data   <- data.used.full.cont.cont.mis[-train.idx, ]
ct.propsc.mis.honest <- honest.causalTree(Y ~ X1 + X3 + X4 + X5 + X6,
data = train.data,
weights = 1 / tmp.propsc$prop.sc[train.idx],
treatment = train.data$A,
est_data = est.data,
est_weights = 1 / tmp.propsc$prop.sc[-train.idx],
est_treatment = est.data$A,
split.Rule = "CT",
split.Honest = T,
HonestSampleSize = nrow(est.data),
split.Bucket = F,
cv.option = "CT",
cv.Honest = T)
cptable.propsc.mis.honest <- ct.propsc.mis.honest$cptable[,1][which.min(ct.propsc.mis.honest$cptable[,4])]
final.tree.propsc.mis.honest <- prune(ct.propsc.mis.honest, cptable.propsc.mis.honest)
t1 <- Sys.time()
eval.ct.propsc.mis.honest <- eval.measures.eff(final.tree   = final.tree.propsc.mis.honest,
test.data    = test.data.mis,
true.trt.eff = data.cont.cont$true.trt.eff,
noise.var    = data.cont.cont$noise.var,
corr.split   = data.cont.cont$corr.split,
where.split  = data.cont.cont$where.split,
dir.split    = data.cont.cont$dir.split)
eval.ct.propsc.mis.honest$t <- as.numeric(difftime(t1, t0, units = "secs"))
eval.ct.propsc.mis.honest$corr.frst.splt <- as.character(ct.propsc.mis.honest$frame$var[1]) == data.cont.cont$corr.split
