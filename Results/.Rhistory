performance.g[, 11 * 3 + 1:11],
performance.g[, 11 * 4 + 1:11],
performance.g[, 11 * 5 + 1:11],
cbind(performance.g[, 11 * 6 + 7 * 0 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.g[, 11 * 6 + 7 * 1 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.g[, 11 * 6 + 7 * 2 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.g[, 11 * 6 + 7 * 3 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.g[, 11 * 6 + 7 * 4 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.g[, 11 * 6 + 7 * 5 + 1:7], matrix(NA, nrow = R, ncol = 4)))
performance.dr <- rbind(performance.dr[, 11 * 0 + 1:11],
performance.dr[, 11 * 1 + 1:11],
performance.dr[, 11 * 2 + 1:11],
performance.dr[, 11 * 3 + 1:11],
performance.dr[, 11 * 4 + 1:11],
performance.dr[, 11 * 5 + 1:11],
performance.dr[, 11 * 6 + 1:11],
performance.dr[, 11 * 7 + 1:11],
performance.dr[, 11 * 8 + 1:11],
performance.dr[, 11 * 9 + 1:11],
cbind(performance.dr[, 11 * 10 + 7 * 0 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.dr[, 11 * 10 + 7 * 1 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.dr[, 11 * 10 + 7 * 2 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.dr[, 11 * 10 + 7 * 3 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.dr[, 11 * 10 + 7 * 4 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.dr[, 11 * 10 + 7 * 5 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.dr[, 11 * 10 + 7 * 6 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.dr[, 11 * 10 + 7 * 7 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.dr[, 11 * 10 + 7 * 8 + 1:7], matrix(NA, nrow = R, ncol = 4)),
cbind(performance.dr[, 11 * 10 + 7 * 9 + 1:7], matrix(NA, nrow = R, ncol = 4)))
performance.all <- rbind(performance.orig.ct,
performance.best.ct,
performance.ipw,
performance.g,
performance.dr)
rm(performance.orig.ct, performance.best.ct, performance.ct,
performance.ipw, performance.g, performance.dr,
performance.ipwInnd, performance.gInnd, performance.drInnd)
dim(performance.all)
colnames(performance.all)
colnames(performance.all) <- gsub("hetero.propsc.true.honest.", "", colnames(performance.all))
# scenarios
algorithm <- c("Original CT", "Best CT")
setting   <- c("Heterogeneous", "Homogeneous")
Method    <- c("True", "Mis Func", "Unmeasured Cov")
scnrs.ct <- expand.grid(Method, setting, algorithm)
colnames(scnrs.ct) <- c("Method", "setting", "algorithm")
algorithm <- c("Main FTS", "Alternative FTS")
setting   <- c("Heterogeneous", "Homogeneous")
Method   <- c("True IPW-CIT", "Mis Func IPW-CIT", "Unmeasured Cov IPW-CIT",
"True g-CIT", "Mis Func g-CIT", "Unmeasured Cov g-CIT",
"Both True DR-CIT", "True Out Mis Func Treat DR-CIT", "True Treat Mis Func Out DR-CIT", "Both Mis Func DR-CIT", "Both Unmeasured Cov DR-CIT")
scnrs.cit <- expand.grid(Method, setting, algorithm)
scnrs.cit <- scnrs.cit[c(1:3, 1:3 + 22, 12:14, 12:14 + 22,
4:6, 4:6 + 22, 15:17, 15:17 + 22,
7:11, 7:11 + 22, 18:22, 18:22 + 22), ]
colnames(scnrs.cit) <- c("Method", "setting", "algorithm")
scnrs <- rbind(scnrs.ct, scnrs.cit)
performance.all <- cbind(scnrs[rep(1:nrow(scnrs), each = R), ],
performance.all)
# relevel factors
performance.all <- performance.all %>%
mutate(Method    = factor(Method, c("Unmeasured Cov", "Mis Func", "True",
"Unmeasured Cov IPW-CIT", "Mis Func IPW-CIT", "True IPW-CIT",
"Unmeasured Cov g-CIT", "Mis Func g-CIT", "True g-CIT",
"Both Unmeasured Cov DR-CIT", "Both Mis Func DR-CIT", "True Treat Mis Func Out DR-CIT", "True Out Mis Func Treat DR-CIT", "Both True DR-CIT")),
setting   = factor(setting, c("Homogeneous", "Heterogeneous")),
algorithm = factor(algorithm, c("Original CT", "Best CT", "Main FTS", "Alternative FTS")))
performance.all <- performance.all %>%
mutate(est.mthd = ifelse(algorithm %in% c("Original CT", "Best CT"), "CT", NA)) %>%
mutate(est.mthd = ifelse(grepl("IPW-CIT", Method), "IPW-CIT", est.mthd)) %>%
mutate(est.mthd = ifelse(grepl("g-CIT", Method), "g-CIT", est.mthd)) %>%
mutate(est.mthd = ifelse(grepl("DR-CIT", Method), "DR-CIT", est.mthd))
performance.all <- performance.all %>%
mutate(est.mthd = factor(est.mthd, c("CT", "IPW-CIT", "g-CIT", "DR-CIT")))
# plot
cbbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7", "#F0E442")
# Figure S9
ggplot(performance.all, aes(Method, mse)) +
geom_boxplot(outlier.size = 0.6, aes(color = est.mthd)) +
ylab("MSE") +
ggtitle("When true underlying subgroups do not follow a tree structure") +
facet_grid(setting ~ algorithm, scales = "free", space = "free_x") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
# scale_y_log10(limits = c(2e-9, 2e4)) +
scale_y_log10() +
scale_colour_manual(values = cbbPalette,
name = "Algorithms",
breaks = c("CT", "IPW-CIT", "g-CIT", "DR-CIT"),
labels = c("CT", "IPW-CIT", "g-CIT", "DR-CIT")) +
theme(legend.position = "bottom")
# exact.corr, size = 1 for homogeneous
identical(performance.all$exact.corr[performance.all$setting == "Homogeneous"], as.numeric(performance.all$size.tree[performance.all$setting == "Homogeneous"] == 1))
# Table S10
summ.select <- NULL
for (i in c(5:6, 8, 10:14)) {
summ.select <- cbind(summ.select,
tapply(performance.all[, i],
paste(performance.all$setting, performance.all$algorithm, performance.all$Method, sep = " "),
mean))
}
colnames(summ.select) <- colnames(performance.all)[c(5:6, 8, 10:14)]
summ.select <- summ.select[c(c(3, 1, 2) + 28 + 25,
c(3, 1, 2) + 28 + 11,
c(c(11, 5, 7), c(11, 5, 7) - 1, c(3, 1, 9, 8, 2)) + 28 + 11 + 3,
c(c(11, 5, 7), c(11, 5, 7) - 1, c(3, 1, 9, 8, 2)) + 28,
c(3, 1, 2) + 22 + 3,
c(3, 1, 2) + 11,
c(c(11, 5, 7), c(11, 5, 7) - 1, c(3, 1, 9, 8, 2)) + 14,
c(c(11, 5, 7), c(11, 5, 7) - 1, c(3, 1, 9, 8, 2))), ]
round(summ.select, 2)
# generate the Latex code
summ.latex <- data.frame(Method = rownames(summ.select),
round(summ.select, 2))
summ.latex <- summ.latex %>%
mutate(Method = sub("Homogeneous ", "", Method)) %>%
mutate(Method = sub("Heterogeneous ", "", Method))
summ.latex <- summ.latex %>%
mutate(Estimator = ifelse(grepl("Original CT", Method), "Original CT", NA)) %>%
mutate(Estimator = ifelse(grepl("Best CT", Method), "Best CT", Estimator)) %>%
mutate(Estimator = ifelse(grepl("IPW", Method), "IPW-CIT", Estimator)) %>%
mutate(Estimator = ifelse(grepl("g", Method), "g-CIT", Estimator)) %>%
mutate(Estimator = ifelse(grepl("DR", Method), "DR-CIT", Estimator))
summ.latex <- summ.latex %>%
mutate(Method = sub("Original CT", "", Method)) %>%
mutate(Method = sub("Best CT", "", Method)) %>%
mutate(Method = sub("Main FTS", "", Method)) %>%
mutate(Method = sub("Alternative FTS", "", Method))
summ.latex <- summ.latex %>%
mutate(Method = sub(" IPW-CIT", "", Method)) %>%
mutate(Method = sub(" g-CIT", "", Method)) %>%
mutate(Method = sub(" DR-CIT", "", Method))
# mutate(Method = sub(" CT", "", Method))
summ.latex <- summ.latex %>%
mutate(p.corr.3lvl = p.corr.3lvl.splts.X4 + p.corr.3lvl.splts.X6,
p.corr.4lvl = p.corr.4lvl.splts.X4 + p.corr.4lvl.splts.X6)
summ.latex <- summ.latex[, c("Estimator", "Method", "exact.corr", "size.tree", "numb.noise", "t", "p.corr.3lvl", "p.corr.4lvl")]
summ.latex <- data.frame(summ.latex[1:28, c("Estimator", "Method", "exact.corr", "size.tree", "numb.noise", "t")], NA,
summ.latex[29:56, 4:ncol(summ.latex)])
print(xtable(summ.latex), include.rownames=FALSE)
setwd('../../Revision/')
load("../Data/Revision/RhcSplitBoot/RhcBootDrSplit20200623_1_28.RData")
rhc.boot.dr <- rhc.boot.dr.result[, 1:(3+12*7)]
load("../Data/Revision/RhcSplitBoot/RhcBootDrSplit20200623_29_168.RData")
rhc.boot.dr <- rbind(rhc.boot.dr, rhc.boot.dr.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootDrSplit20200623_169_292.RData")
rhc.boot.dr <- rbind(rhc.boot.dr, rhc.boot.dr.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootDrSplit20200623_293_293.RData")
rhc.boot.dr <- rbind(rhc.boot.dr, rhc.boot.dr.result[1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootDrSplit20200623_294_308.RData")
rhc.boot.dr <- rbind(rhc.boot.dr, rhc.boot.dr.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootDrSplit20200623_309_448.RData")
rhc.boot.dr <- rbind(rhc.boot.dr, rhc.boot.dr.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootDrSplit20200623_449_728.RData")
rhc.boot.dr <- rbind(rhc.boot.dr, rhc.boot.dr.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootDrSplit20200623_729_1000.RData")
rhc.boot.dr <- rbind(rhc.boot.dr, rhc.boot.dr.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootIpwSplit20200627_1_28.RData")
rhc.boot.ipw <- rhc.boot.ipw.result[, 1:(3+12*7)]
load("../Data/Revision/RhcSplitBoot/RhcBootIpwSplit20200627_29_168.RData")
rhc.boot.ipw <- rbind(rhc.boot.ipw, rhc.boot.ipw.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootIpwSplit20200627_169_584.RData")
rhc.boot.ipw <- rbind(rhc.boot.ipw, rhc.boot.ipw.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootIpwSplit20200627_585_1000.RData")
rhc.boot.ipw <- rbind(rhc.boot.ipw, rhc.boot.ipw.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootGSplit20200628_1001_1008.RData")
rhc.boot.g.result.1001 <- rhc.boot.g.result
load("../Data/Revision/RhcSplitBoot/RhcBootGSplit20200628_1_28.RData")
rhc.boot.g <- rhc.boot.g.result[, 1:(3+12*7)]
load("../Data/Revision/RhcSplitBoot/RhcBootGSplit20200628_29_168.RData")
rhc.boot.g <- rbind(rhc.boot.g, rhc.boot.g.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootGSplit20200628_169_308.RData")
rhc.boot.g <- rbind(rhc.boot.g, rhc.boot.g.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootGSplit20200628_309_448.RData")
rhc.boot.g <- rbind(rhc.boot.g, rhc.boot.g.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootGSplit20200628_449_588.RData")
rhc.boot.g <- rbind(rhc.boot.g, rhc.boot.g.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootGSplit20200628_589_634.RData")
rhc.boot.g <- rbind(rhc.boot.g, rhc.boot.g.result[, 1:(3+12*7)])
rhc.boot.g <- rbind(rhc.boot.g, rhc.boot.g.result.1001[1, 1:(3+12*7)])
dim(rhc.boot.g)
load("../Data/Revision/RhcSplitBoot/RhcBootGSplit20200628_636_686.RData")
rhc.boot.g <- rbind(rhc.boot.g, rhc.boot.g.result[, 1:(3+12*7)])
rhc.boot.g <- rbind(rhc.boot.g, rhc.boot.g.result.1001[2, 1:(3+12*7)])
dim(rhc.boot.g)
load("../Data/Revision/RhcSplitBoot/RhcBootGSplit20200628_688_727.RData")
rhc.boot.g <- rbind(rhc.boot.g, rhc.boot.g.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootGSplit20200628_728_728.RData")
rhc.boot.g <- rbind(rhc.boot.g, rhc.boot.g.result[1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootGSplit20200628_729_868.RData")
rhc.boot.g <- rbind(rhc.boot.g, rhc.boot.g.result[, 1:(3+12*7)])
load("../Data/Revision/RhcSplitBoot/RhcBootGSplit20200628_869_1000.RData")
rhc.boot.g <- rbind(rhc.boot.g, rhc.boot.g.result[, 1:(3+12*7)])
dim(rhc.boot.g)
rm(rhc.boot.ipw.result, rhc.boot.dr.result, rhc.boot.g.result)
# combine results from CITs
rhc.boot.cit <- rbind(cbind("IPW-CIT", rhc.boot.ipw),
cbind("G-CIT", rhc.boot.g),
cbind("DR-CIT", rhc.boot.dr))
# combine results from CITs
rhc.boot.cit <- rbind(cbind("IPW-CIT", rhc.boot.ipw),
cbind("g-CIT", rhc.boot.g),
cbind("DR-CIT", rhc.boot.dr))
rhc.boot.cit <- data.frame(rhc.boot.cit)
colnames(rhc.boot.cit)[1:4] <- c("estimator", "t1", "t2", "size_tree")
rhc.boot.cit <- rhc.boot.cit %>%
mutate(size_tree = as.numeric(levels(size_tree))[size_tree])
rhc.boot.cit <- rhc.boot.cit %>%
mutate(estimator = factor(estimator, c("IPW-CIT", "g-CIT", "DR-CIT")))
rhc.boot.cit <- rhc.boot.cit %>%
mutate(size_tree_fig = ifelse(size_tree == 1, "1", NA)) %>%
mutate(size_tree_fig = ifelse((size_tree >= 2) & (size_tree <= 10), "2 - 10", size_tree_fig)) %>%
mutate(size_tree_fig = ifelse((size_tree >= 11) & (size_tree <= 30), "11 - 30", size_tree_fig)) %>%
mutate(size_tree_fig = ifelse((size_tree >= 31) & (size_tree <= 60), "31 - 60", size_tree_fig)) %>%
mutate(size_tree_fig = ifelse(size_tree >= 61, "> 60", size_tree_fig))
rhc.boot.cit <- rhc.boot.cit %>%
mutate(size_tree_fig = factor(size_tree_fig, c("1", "2 - 10", "11 - 30", "31 - 60", "> 60")))
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7", "#F0E442", "#999999")
ggplot(rhc.boot.cit, aes(x = size_tree_fig, fill = estimator)) +
geom_bar(position = position_dodge2(preserve = "single", padding = 0)) +
# facet_grid(estimator ~ .) +
theme_bw() +
# scale_x_log10(breaks = c(1:3, 5, 10, 50, 100)) +
# scale_y_sqrt(name   = "Count",
#              breaks = c(0, 10, seq(250, 1000, by = 250)),
#              labels = c(0, 10, seq(250, 1000, by = 250)),
#              limits = c(0, 1000)) +
# ylim(0, 1000) +
scale_y_continuous(breaks = seq(0, 1000, 250),
limits = c(0, 1030)) +
ylab("Count") +
xlab("Size of trees") +
# scale_colour_manual(values = cbbPalette,
#                     name = "Algorithms",
#                     breaks = c("IPW-CIT", "g-CIT", "DR-CIT"),
#                     labels = c("IPW-CIT", "g-CIT", "DR-CIT")) +
scale_fill_manual(values = cbbPalette,
name = "Algorithms",
breaks = c("IPW-CIT", "g-CIT", "DR-CIT"),
labels = c("IPW-CIT", "g-CIT", "DR-CIT")) +
theme(legend.position = "bottom") +
annotate(geom = "text", x = c(0.7, 1, 1.3), y = c(828, 997, 879) + 25, label = c(828, 997, 879))
pdf("../../Report/20200417Revision/Figures/RhcSplitSizeTree20200629.pdf", width = 8, height = 5)
ggplot(rhc.boot.cit, aes(x = size_tree_fig, fill = estimator)) +
geom_bar(position = position_dodge2(preserve = "single", padding = 0)) +
# facet_grid(estimator ~ .) +
theme_bw() +
# scale_x_log10(breaks = c(1:3, 5, 10, 50, 100)) +
# scale_y_sqrt(name   = "Count",
#              breaks = c(0, 10, seq(250, 1000, by = 250)),
#              labels = c(0, 10, seq(250, 1000, by = 250)),
#              limits = c(0, 1000)) +
# ylim(0, 1000) +
scale_y_continuous(breaks = seq(0, 1000, 250),
limits = c(0, 1030)) +
ylab("Count") +
xlab("Size of trees") +
# scale_colour_manual(values = cbbPalette,
#                     name = "Algorithms",
#                     breaks = c("IPW-CIT", "g-CIT", "DR-CIT"),
#                     labels = c("IPW-CIT", "g-CIT", "DR-CIT")) +
scale_fill_manual(values = cbbPalette,
name = "Algorithms",
breaks = c("IPW-CIT", "g-CIT", "DR-CIT"),
labels = c("IPW-CIT", "g-CIT", "DR-CIT")) +
theme(legend.position = "bottom") +
annotate(geom = "text", x = c(0.7, 1, 1.3), y = c(828, 997, 879) + 25, label = c(828, 997, 879))
dev.off()
tapply(rhc.boot.cit$size_tree_fig, rhc.boot.cit$estimator, table)
# bootstrap confidence interval
load("../Data/Revision/RhcSplitBoot/RhcBootSplitCi20200707_1_1008.RData")
ci.ipw <- ci.cit[c(rhc.boot.cit$size_tree[rhc.boot.cit$estimator == "IPW-CIT"] == 1, rep(F, 8)), 1:3]
ci.g   <- ci.cit[c(rhc.boot.cit$size_tree[rhc.boot.cit$estimator == "g-CIT"] == 1, rep(F, 8)), 4:6]
ci.g[635, ] <- ci.cit[1001, 4:6]
ci.g[687, ] <- ci.cit[1002, 4:6]
ci.dr  <- ci.cit[c(rhc.boot.cit$size_tree[rhc.boot.cit$estimator == "DR-CIT"] == 1, rep(F, 8)), 7:9]
apply(ci.ipw, 2, median)
apply(ci.g, 2, median)
apply(ci.dr, 2, median)
apply(ci.dr, 2, mean)
ci.cit <- rbind(cbind("IPW-CIT", ci.ipw),
cbind("g-CIT", ci.g),
cbind("DR-CIT", ci.dr))
ci.cit <- data.frame(ci.cit)
colnames(ci.cit) <- c("estimator", "ci025", "ci50", "ci975")
ci.cit <- ci.cit %>%
mutate(ci025 = as.numeric(levels(ci025))[ci025],
ci50  = as.numeric(levels(ci50))[ci50],
ci975 = as.numeric(levels(ci975))[ci975])
ci.cit <- ci.cit %>%
mutate(estimator = factor(estimator, c("IPW-CIT", "g-CIT", "DR-CIT")))
ci.cit <- ci.cit %>%
gather(limit, value, ci025:ci975)
ci.cit <- ci.cit %>%
mutate(limit = factor(limit,
levels = c("ci025", "ci50", "ci975"),
labels = c("2.5%", "Median", "97.5%")))
ggplot(ci.cit, aes(x = value, fill = estimator)) +
geom_histogram(position = position_dodge2(preserve = "single", padding = 0)) +
facet_grid(limit ~ .) +
theme_bw() +
# scale_x_log10(breaks = c(1:3, 5, 10, 50, 100)) +
# scale_y_sqrt(name   = "Count",
#              breaks = c(0, 10, seq(250, 1000, by = 250)),
#              labels = c(0, 10, seq(250, 1000, by = 250)),
#              limits = c(0, 1000)) +
# ylim(0, 1000) +
ylab("Count") +
xlab("Treatment effect") +
# scale_colour_manual(values = cbbPalette,
#                     name = "Algorithms",
#                     breaks = c("IPW-CIT", "g-CIT", "DR-CIT"),
#                     labels = c("IPW-CIT", "g-CIT", "DR-CIT")) +
scale_fill_manual(values = cbbPalette,
name = "Algorithms",
breaks = c("IPW-CIT", "g-CIT", "DR-CIT"),
labels = c("IPW-CIT", "g-CIT", "DR-CIT")) +
theme(legend.position = "bottom")
pdf("../../Report/20200417Revision/Figures/RhcBootSplitRootCi20200709.pdf", width = 7, height = 5)
ggplot(ci.cit, aes(x = value, fill = estimator)) +
geom_histogram(position = position_dodge2(preserve = "single", padding = 0)) +
facet_grid(limit ~ .) +
theme_bw() +
# scale_x_log10(breaks = c(1:3, 5, 10, 50, 100)) +
# scale_y_sqrt(name   = "Count",
#              breaks = c(0, 10, seq(250, 1000, by = 250)),
#              labels = c(0, 10, seq(250, 1000, by = 250)),
#              limits = c(0, 1000)) +
# ylim(0, 1000) +
ylab("Count") +
xlab("Treatment effect") +
# scale_colour_manual(values = cbbPalette,
#                     name = "Algorithms",
#                     breaks = c("IPW-CIT", "g-CIT", "DR-CIT"),
#                     labels = c("IPW-CIT", "g-CIT", "DR-CIT")) +
scale_fill_manual(values = cbbPalette,
name = "Algorithms",
breaks = c("IPW-CIT", "g-CIT", "DR-CIT"),
labels = c("IPW-CIT", "g-CIT", "DR-CIT")) +
theme(legend.position = "bottom")
# annotate(geom = "text", x = c(0.7, 1, 1.3), y = c(828, 664, 879) + 25, label = c(828, 664, 879))
dev.off()
# Lower, upper bounds of the treatment effect estimates in two terminal nodes
load("../Data/Revision/RhcSplitBoot/RhcSpltFrstSpltCi20200708.RData")
ci.frst.splt.cit <- data.frame(ci.frst.splt.cit)
colnames(ci.frst.splt.cit) <- c("include",
paste0(rep(c("ipw_", "g_", "dr_"), each = 3 * 2),
rep(rep(c("l_", "r_"), each = 3), 3),
rep(rep(c("025", "50", "975"), 2), 3)))
ci.frst.splt.cit <- ci.frst.splt.cit %>%
filter(include == 1) %>%
select(starts_with("dr"))
apply(ci.frst.splt.cit, 2, median)
apply(ci.frst.splt.cit, 2, mean)
ci.frst.splt.cit <- ci.frst.splt.cit %>%
gather(limit, value)
ci.frst.splt.cit <- ci.frst.splt.cit %>%
mutate(node = ifelse(grepl("_l_", limit), "P(survival) < 0.85", "P(survival) >= 0.85")) %>%
mutate(bound = ifelse(grepl("025", limit), "2.5%", NA)) %>%
mutate(bound = ifelse(grepl("50", limit), "Median", bound)) %>%
mutate(bound = ifelse(grepl("975", limit), "97.5%", bound))
ci.frst.splt.cit <- ci.frst.splt.cit %>%
mutate(node = factor(node, c("P(survival) < 0.85", "P(survival) >= 0.85"))) %>%
mutate(bound = factor(bound, c("2.5%", "Median", "97.5%")))
ggplot(ci.frst.splt.cit, aes(x = value, fill = node)) +
geom_histogram(position = position_dodge2(preserve = "single", padding = 0)) +
facet_grid(bound ~ .) +
theme_bw() +
# scale_x_log10(breaks = c(1:3, 5, 10, 50, 100)) +
scale_y_continuous(breaks = c(0, 5.5, 11, 16.5),
labels = paste0(round(c(0, 5.5, 11, 16.5) / 44, 4) * 100, "%")) +
# scale_y_sqrt(name   = "Count",
#              breaks = c(0, 10, seq(250, 1000, by = 250)),
#              labels = c(0, 10, seq(250, 1000, by = 250)),
#              limits = c(0, 1000)) +
# ylim(0, 1000) +
ylab("Count") +
xlab("Treatment effect") +
# scale_colour_manual(values = cbbPalette,
#                     name = "Algorithms",
#                     breaks = c("IPW-CIT", "g-CIT", "DR-CIT"),
#                     labels = c("IPW-CIT", "g-CIT", "DR-CIT")) +
scale_fill_manual(values = cbbPalette[6:7],
name = "Node",
breaks = c("P(survival) < 0.85", "P(survival) >= 0.85")) +
theme(legend.position = "bottom")
setwd("../Github/Results/")
load("../Data/AppendixD2/RhcBootIpwSplit.RData")
rhc.boot.ipw <- rhc.boot.ipw.result
load("../Data/AppendixD2/RhcBootGSplit.RData")
rhc.boot.g <- rhc.boot.g.result
load("../Data/AppendixD2/RhcBootDrSplit.RData")
rhc.boot.dr <- rhc.boot.dr.result
rm(rhc.boot.ipw.result, rhc.boot.dr.result, rhc.boot.g.result)
# combine results from CITs
rhc.boot.cit <- rbind(cbind("IPW-CIT", rhc.boot.ipw),
cbind("g-CIT", rhc.boot.g),
cbind("DR-CIT", rhc.boot.dr))
rhc.boot.cit <- data.frame(rhc.boot.cit)
colnames(rhc.boot.cit)[1:4] <- c("estimator", "t1", "t2", "size_tree")
rhc.boot.cit <- rhc.boot.cit %>%
mutate(size_tree = as.numeric(levels(size_tree))[size_tree])
rhc.boot.cit <- rhc.boot.cit %>%
mutate(estimator = factor(estimator, c("IPW-CIT", "g-CIT", "DR-CIT")))
rhc.boot.cit <- rhc.boot.cit %>%
mutate(size_tree_fig = ifelse(size_tree == 1, "1", NA)) %>%
mutate(size_tree_fig = ifelse((size_tree >= 2) & (size_tree <= 10), "2 - 10", size_tree_fig)) %>%
mutate(size_tree_fig = ifelse((size_tree >= 11) & (size_tree <= 30), "11 - 30", size_tree_fig)) %>%
mutate(size_tree_fig = ifelse((size_tree >= 31) & (size_tree <= 60), "31 - 60", size_tree_fig)) %>%
mutate(size_tree_fig = ifelse(size_tree >= 61, "> 60", size_tree_fig))
rhc.boot.cit <- rhc.boot.cit %>%
mutate(size_tree_fig = factor(size_tree_fig, c("1", "2 - 10", "11 - 30", "31 - 60", "> 60")))
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7", "#F0E442", "#999999")
# Figure S10
ggplot(rhc.boot.cit, aes(x = size_tree_fig, fill = estimator)) +
geom_bar(position = position_dodge2(preserve = "single", padding = 0)) +
# facet_grid(estimator ~ .) +
theme_bw() +
# scale_x_log10(breaks = c(1:3, 5, 10, 50, 100)) +
# scale_y_sqrt(name   = "Count",
#              breaks = c(0, 10, seq(250, 1000, by = 250)),
#              labels = c(0, 10, seq(250, 1000, by = 250)),
#              limits = c(0, 1000)) +
# ylim(0, 1000) +
scale_y_continuous(breaks = seq(0, 1000, 250),
limits = c(0, 1030)) +
ylab("Count") +
xlab("Size of trees") +
# scale_colour_manual(values = cbbPalette,
#                     name = "Algorithms",
#                     breaks = c("IPW-CIT", "g-CIT", "DR-CIT"),
#                     labels = c("IPW-CIT", "g-CIT", "DR-CIT")) +
scale_fill_manual(values = cbbPalette,
name = "Algorithms",
breaks = c("IPW-CIT", "g-CIT", "DR-CIT"),
labels = c("IPW-CIT", "g-CIT", "DR-CIT")) +
theme(legend.position = "bottom") +
annotate(geom = "text", x = c(0.7, 1, 1.3), y = c(828, 997, 879) + 25, label = c(828, 997, 879))
tapply(rhc.boot.cit$size_tree_fig, rhc.boot.cit$estimator, table)
# bootstrap confidence interval
load("../Data/AppendixD3/RhcSpltRootCi.RData")
ci.ipw <- ci.cit[c(rhc.boot.cit$size_tree[rhc.boot.cit$estimator == "IPW-CIT"] == 1), 1:3]
ci.g   <- ci.cit[c(rhc.boot.cit$size_tree[rhc.boot.cit$estimator == "g-CIT"] == 1), 4:6]
ci.dr  <- ci.cit[c(rhc.boot.cit$size_tree[rhc.boot.cit$estimator == "DR-CIT"] == 1), 7:9]
apply(ci.ipw, 2, median)
apply(ci.g, 2, median)
apply(ci.dr, 2, median)
apply(ci.dr, 2, mean)
ci.cit <- rbind(cbind("IPW-CIT", ci.ipw),
cbind("g-CIT", ci.g),
cbind("DR-CIT", ci.dr))
ci.cit <- data.frame(ci.cit)
colnames(ci.cit) <- c("estimator", "ci025", "ci50", "ci975")
ci.cit <- ci.cit %>%
mutate(ci025 = as.numeric(levels(ci025))[ci025],
ci50  = as.numeric(levels(ci50))[ci50],
ci975 = as.numeric(levels(ci975))[ci975])
ci.cit <- ci.cit %>%
mutate(estimator = factor(estimator, c("IPW-CIT", "g-CIT", "DR-CIT")))
ci.cit <- ci.cit %>%
gather(limit, value, ci025:ci975)
ci.cit <- ci.cit %>%
mutate(limit = factor(limit,
levels = c("ci025", "ci50", "ci975"),
labels = c("2.5%", "Median", "97.5%")))
# Figure S11
ggplot(ci.cit, aes(x = value, fill = estimator)) +
geom_histogram(position = position_dodge2(preserve = "single", padding = 0)) +
facet_grid(limit ~ .) +
theme_bw() +
ylab("Count") +
xlab("Treatment effect") +
scale_fill_manual(values = cbbPalette,
name = "Algorithms",
breaks = c("IPW-CIT", "g-CIT", "DR-CIT"),
labels = c("IPW-CIT", "g-CIT", "DR-CIT")) +
theme(legend.position = "bottom")
# Lower, upper bounds of the treatment effect estimates in two terminal nodes
load("../Data/AppendixD3/RhcSpltFrstSpltCi.RData")
ci.frst.splt.cit <- data.frame(ci.frst.splt.cit)
colnames(ci.frst.splt.cit) <- c("include",
paste0(rep(c("ipw_", "g_", "dr_"), each = 3 * 2),
rep(rep(c("l_", "r_"), each = 3), 3),
rep(rep(c("025", "50", "975"), 2), 3)))
ci.frst.splt.cit <- ci.frst.splt.cit %>%
filter(include == 1) %>%
select(starts_with("dr"))
apply(ci.frst.splt.cit, 2, median)
apply(ci.frst.splt.cit, 2, mean)
ci.frst.splt.cit <- ci.frst.splt.cit %>%
gather(limit, value)
ci.frst.splt.cit <- ci.frst.splt.cit %>%
mutate(node = ifelse(grepl("_l_", limit), "P(survival) < 0.85", "P(survival) >= 0.85")) %>%
mutate(bound = ifelse(grepl("025", limit), "2.5%", NA)) %>%
mutate(bound = ifelse(grepl("50", limit), "Median", bound)) %>%
mutate(bound = ifelse(grepl("975", limit), "97.5%", bound))
ci.frst.splt.cit <- ci.frst.splt.cit %>%
mutate(node = factor(node, c("P(survival) < 0.85", "P(survival) >= 0.85"))) %>%
mutate(bound = factor(bound, c("2.5%", "Median", "97.5%")))
# Figure S12
ggplot(ci.frst.splt.cit, aes(x = value, fill = node)) +
geom_histogram(position = position_dodge2(preserve = "single", padding = 0)) +
facet_grid(bound ~ .) +
theme_bw() +
scale_y_continuous(breaks = c(0, 5.5, 11, 16.5),
labels = paste0(round(c(0, 5.5, 11, 16.5) / 44, 4) * 100, "%")) +
ylab("Count") +
xlab("Treatment effect") +
scale_fill_manual(values = cbbPalette[6:7],
name = "Node",
breaks = c("P(survival) < 0.85", "P(survival) >= 0.85")) +
theme(legend.position = "bottom")
