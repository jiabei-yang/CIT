job.number = 1
load("../seed1000.rda")
set.seed(a[job.number])
setwd("..")
folder <- paste(getwd(), "/Functions/", sep="")
functions <- list.files(folder)
functions <- paste(folder, functions, sep = "")
for (i in functions){
source(i)
}
setwd("main/")
# Causal Tree
# library(devtools)
# install_github("susanathey/causalTree")
library(causalTree)
coeff.prop.sc <- 0.6
N.training    <- 10^3
N.testing     <- 10^3
#####################################################################################################################
################################################# Heterogeneous #####################################################
#####################################################################################################################
data.cont.cont            <- makeData.cont.eff.cont(N             = N.training,
n.test        = N.testing,
coeff.prop.sc = coeff.prop.sc)
data.used.full.cont.cont  <- data.cont.cont$data.used
data.used.cont.cont       <- data.used.full.cont.cont[1:800, ]
# val.sample: used in EstIpw.CvMethod1, the order of the columns must be A, Y, X
data.validation.cont.cont <- data.used.full.cont.cont[801:1000, ]
#####################################################################################################################
################################### Misspecified propensity score model, no honest ##################################
#####################################################################################################################
# Pretend X2 is unmeasured
data.used.full.cont.cont.mis <- data.used.full.cont.cont %>%
select(-X2)
tmp.propsc <- est.prop.sc(df.noy    = data.used.full.cont.cont.mis[, !colnames(data.used.full.cont.cont.mis) %in% c("Y")],
method    = "GLM",
form.true = "A ~ X1 + X3 + X4 + X5 + X6")
tmp.propsc$prop.sc <- ifelse(data.used.full.cont.cont$A == 1, tmp.propsc$prop.sc, 1 - tmp.propsc$prop.sc)
tmp.propsc <- est.prop.sc(df.noy    = data.used.full.cont.cont.mis[, !colnames(data.used.full.cont.cont.mis) %in% c("Y")],
method    = "GLM",
form.true = "A ~ X1 + X3 + X4 + X5 + X6")
tmp.propsc$prop.sc <- ifelse(data.used.full.cont.cont.mis$A == 1, tmp.propsc$prop.sc, 1 - tmp.propsc$prop.sc)
ct.propsc.mis.nohonest <- causalTree(Y ~ X1 + X3 + X4 + X5 + X6,
data       = data.used.full.cont.cont.mis,
weights    = 1 / tmp.propsc$prop.sc,
treatment  = data.used.full.cont.cont.mis$A,
split.Rule = "CT",
cv.option  = "CT",
split.Honest = T,
cv.Honest = T,
split.Bucket = F,
xval = 5,
cp = 0,
minsize = 20)
cptable.propsc.mis.nohonest <- ct.propsc.mis.nohonest$cptable[,1][which.min(ct.propsc.mis.nohonest$cptable[,4])]
final.tree.propsc.mis.nohonest <- prune(ct.propsc.mis.nohonest, cptable.propsc.mis.nohonest)
t1 <- Sys.time()
test.data.mis <- data.cont.cont$test.data %>%
select(-X2)
View(test.data.mis)
eval.ct.propsc.mis.nohonest <- eval.measures.eff(final.tree   = final.tree.propsc.mis.nohonest,
test.data    = test.data.mis,
true.trt.eff = data.cont.cont$true.trt.eff,
noise.var    = data.cont.cont$noise.var,
corr.split   = data.cont.cont$corr.split,
where.split  = data.cont.cont$where.split,
dir.split    = data.cont.cont$dir.split)
eval.ct.propsc.mis.nohonest$t <- as.numeric(difftime(t1, t0, units = "secs"))
View(data.used.full.cont.cont)
#####################################################################################################################
################################################## Homogeneous ######################################################
#####################################################################################################################
data.cont.cont            <- makeData.cont.noeff.cont(N             = N.training,
n.test        = N.testing,
coeff.prop.sc = coeff.prop.sc)
data.used.full.cont.cont  <- data.cont.cont$data.used
data.used.cont.cont       <- data.used.full.cont.cont[1:800, ]
# val.sample: used in EstIpw.CvMethod1, the order of the columns must be A, Y, X
data.validation.cont.cont <- data.used.full.cont.cont[801:1000, ]
# Pretend X2 is unmeasured
data.used.full.cont.cont.mis <- data.used.full.cont.cont %>%
select(-X2)
test.data.mis <- data.cont.cont$test.data %>%
select(-X2)
tmp.propsc <- est.prop.sc(df.noy    = data.used.full.cont.cont.mis[, !colnames(data.used.full.cont.cont.mis) %in% c("Y")],
method    = "GLM",
form.true = "A ~ X1 + X3 + X4 + X5 + X6")
tmp.propsc$prop.sc <- ifelse(data.used.full.cont.cont.mis$A == 1, tmp.propsc$prop.sc, 1 - tmp.propsc$prop.sc)
ct.propsc.mis.nohonest <- causalTree(Y ~ X1 + X3 + X4 + X5 + X6,
data       = data.used.full.cont.cont.mis,
weights    = 1 / tmp.propsc$prop.sc,
treatment  = data.used.full.cont.cont.mis$A,
split.Rule = "CT",
cv.option  = "CT",
split.Honest = T,
cv.Honest = T,
split.Bucket = F,
xval = 5,
cp = 0,
minsize = 20)
cptable.propsc.mis.nohonest <- ct.propsc.mis.nohonest$cptable[,1][which.min(ct.propsc.mis.nohonest$cptable[,4])]
final.tree.propsc.mis.nohonest <- prune(ct.propsc.mis.nohonest, cptable.propsc.mis.nohonest)
t1 <- Sys.time()
load("/Users/jiabeiyang/Dropbox (Brown)/CausalTrees/Code/Github/main/all.Rdata")
setwd("..")
folder <- paste(getwd(), "/Functions/", sep="")
functions <- list.files(folder)
functions <- paste(folder, functions, sep = "")
for (i in functions){
source(i)
}
setwd("main/")
setwd("..")
folder <- paste(getwd(), "/Functions/", sep="")
functions <- list.files(folder)
functions <- paste(folder, functions, sep = "")
for (i in functions){
source(i)
}
job.number = 1
load("../seed1000.rda")
setwd("main/")
load("../seed1000.rda")
set.seed(a[job.number])
setwd("..")
folder <- paste(getwd(), "/Functions/", sep="")
functions <- list.files(folder)
functions <- paste(folder, functions, sep = "")
for (i in functions){
source(i)
}
functions
setwd("main/")
setwd("..")
folder <- paste(getwd(), "/Functions/", sep="")
functions <- list.files(folder)
functions
functions <- paste(folder, functions, sep = "")
for (i in functions){
source(i)
}
functions
setwd("main/")
setwd("..")
folder <- paste(getwd(), "/Functions/", sep="")
functions <- list.files(folder)
functions <- paste(folder, functions, sep = "")
functions
for (i in functions){
source(i)
}
functions
