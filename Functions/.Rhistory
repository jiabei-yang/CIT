form.true = propsc.form.true)
prop.sc.r <- est.prop.sc(df.noy    = val.sample.right.noy,
method    = propsc.mthd,
form.true = propsc.form.true)
mu.1l <- mean(val.sample.left$Y * val.sample.left$A / prop.sc.l)
mu.0l <- mean(val.sample.left$Y * (1 - val.sample.left$A)/ (1 - prop.sc.l))
mu.1r <- mean(val.sample.right$Y * val.sample.right$A / prop.sc.r)
mu.0r <- mean(val.sample.right$Y * (1 - val.sample.right$A)/ (1 - prop.sc.r))
h.l <- apply((val.sample.left$A * val.sample.left$Y * (1 - prop.sc.l) / prop.sc.l +
(1 - val.sample.left$A) * val.sample.left$Y * prop.sc.l / (1 - prop.sc.l)) *
val.w.used.left,
2,
mean)
h.r <- apply((val.sample.right$A * val.sample.right$Y * (1 - prop.sc.r) / prop.sc.r +
(1 - val.sample.right$A) * val.sample.right$Y * prop.sc.r / (1 - prop.sc.r)) *
val.w.used.right,
2,
mean)
e.bb.l <- as.matrix(t(prop.sc.l * val.w.used.left)) %*%
as.matrix((1 - prop.sc.l) * val.w.used.left) / nrow(val.sample.left)
e.bb.r <- as.matrix(t(prop.sc.r * val.w.used.right)) %*%
as.matrix((1 - prop.sc.r) * val.w.used.right) / nrow(val.sample.right)
var.l <- mean((val.sample.left$A * val.sample.left$Y / prop.sc.l -
(1 - val.sample.left$A) * val.sample.left$Y / (1 - prop.sc.l) -
(mu.1l - mu.0l) -
(val.sample.left$A - prop.sc.l) * (h.l %*% solve(e.bb.l) %*% as.matrix(t(val.w.used.left))))^2) /
nrow(val.sample.left)
var.r <- mean((val.sample.right$A * val.sample.right$Y / prop.sc.r -
(1 - val.sample.right$A) * val.sample.right$Y / (1 - prop.sc.r) -
(mu.1r - mu.0r) -
(val.sample.right$A - prop.sc.r) * (h.r %*% solve(e.bb.r) %*% as.matrix(t(val.w.used.right))))^2) /
nrow(val.sample.right)
}
goodness.test <- goodness.test + (((mu.1l - mu.0l) - (mu.1r - mu.0r)) / sqrt(var.l + var.r))^2
} # End h
} # End if loop
# Calculating complexity value
complex.val[m] = goodness.test - lambda.used * numb.int
} # End m loop
# Averaging over cross validation sets
tree.final = tree.list[[which.max(complex.val)]]
return(list(tree.final, complex.val))
}
# val.sample: the order of the columns must be A, Y, X
final.tree.estipw.glm.propscout.mis.cv1 <- EstIpw.CvMethod1(data.used         = data.used.cont.cont,
tree.list         = seq.created.estipw.glm.propscout.mis$tree.list,
lambda.used       = 4,
val.sample        = data.validation.cont.cont,
type.var          = "cont",
propsc.mod.out    = T,
propsc.mthd       = "GLM",
propsc.form.true  = NULL,
val.w             = NULL,
propsc.mod.insplt = NULL,
min.obs.mod       = NULL)
final.tree.estipw.glm.propscout.mis.cv1
eval.final.estipw.glm.propscout.mis.cv1 <- eval.measures.eff(final.tree   = final.tree.estipw.glm.propscout.mis.cv1[[1]],
test.data    = data.cont.cont$test.data,
true.trt.eff = data.cont.cont$true.trt.eff,
noise.var    = data.cont.cont$noise.var,
corr.split   = data.cont.cont$corr.split)
eval.final.estipw.glm.propscout.mis.cv1$t <- as.numeric(difftime(t1, t0, units = "secs"))
eval.final.estipw.glm.propscout.mis.cv1
t0 <- Sys.time()
seq.created.estipw.glm.propscinnd.mis <- create.sequence(data.used         = data.used.cont.cont,
est.used          = "IPW",
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GLM",
propsc.form.true  = NULL,
w                 = NULL,
propsc.mod.insplt = F,
num.truc.obs      = 30,
min.node          = 20)
# numtrees.ipw.glm.propscinnd.mis <- length(seq.created.estipw.glm.propscinnd.mis$tree.list)
final.tree.estipw.glm.propscinnd.mis.cv1 <- EstIpw.CvMethod1(data.used         = data.used.cont.cont,
tree.list         = seq.created.estipw.glm.propscinnd.mis$tree.list,
lambda.used       = 4,
val.sample        = data.validation.cont.cont,
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GLM",
propsc.form.true  = NULL,
val.w             = NULL,
propsc.mod.insplt = F,
min.obs.mod       = 10)
t1 <- Sys.time()
final.tree.estipw.glm.propscinnd.mis.cv1
eval.final.estipw.glm.propscinnd.mis.cv1 <- eval.measures.eff(final.tree   = final.tree.estipw.glm.propscinnd.mis.cv1[[1]],
test.data    = data.cont.cont$test.data,
true.trt.eff = data.cont.cont$true.trt.eff,
noise.var    = data.cont.cont$noise.var,
corr.split   = data.cont.cont$corr.split)
eval.final.estipw.glm.propscinnd.mis.cv1$t <- as.numeric(difftime(t1, t0, units = "secs"))
eval.final.estipw.glm.propscinnd.mis.cv1
seq.created.estipw.glm.propscinnd.mis
t0 <- Sys.time()
seq.created.estipw.glm.propscinsplt.mis <- create.sequence(data.used         = data.used.cont.cont,
est.used          = "IPW",
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GLM",
propsc.form.true  = NULL,
w                 = NULL,
propsc.mod.insplt = T,
num.truc.obs      = 30,
min.node          = 20)
# numtrees.ipw.glm.propscinsplt.mis <- length(seq.created.estipw.glm.propscinsplt.mis$tree.list)
final.tree.estipw.glm.propscinsplt.mis.cv1 <- EstIpw.CvMethod1(data.used         = data.used.cont.cont,
tree.list         = seq.created.estipw.glm.propscinsplt.mis$tree.list,
lambda.used       = 4,
val.sample        = data.validation.cont.cont,
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GLM",
propsc.form.true  = NULL,
val.w             = NULL,
propsc.mod.insplt = T,
min.obs.mod       = 10)
t1 <- Sys.time()
warnings()
eval.final.estipw.glm.propscinsplt.mis.cv1 <- eval.measures.eff(final.tree   = final.tree.estipw.glm.propscinsplt.mis.cv1[[1]],
test.data    = data.cont.cont$test.data,
true.trt.eff = data.cont.cont$true.trt.eff,
noise.var    = data.cont.cont$noise.var,
corr.split   = data.cont.cont$corr.split)
eval.final.estipw.glm.propscinsplt.mis.cv1$t <- as.numeric(difftime(t1, t0, units = "secs"))
final.tree.estipw.glm.propscinsplt.mis.cv1
eval.final.estipw.glm.propscinsplt.mis.cv1
seq.created.estipw.glm.propscinsplt.mis
t0 <- Sys.time()
seq.created.estipw.gam.propscout.true <- create.sequence(data.used         = data.used.cont.cont,
est.used          = "IPW",
type.var          = "cont",
propsc.mod.out    = T,
propsc.mthd       = "GAM",
propsc.form.true  = "A ~ s(X1) + s(X2) + s(X3)",
w                 = cbind(1, data.used.cont.cont[, 3:5]),
propsc.mod.insplt = NULL,
num.truc.obs      = 30,
min.node          = 20)
# numtrees.ipw.gam.propscout.true <- length(seq.created.estipw.gam.propscout.true$tree.list)
# data.used         = data.used.cont.cont
# est.used          = "IPW"
# type.var          = "cont"
# propsc.mod.out    = T
# propsc.mthd       = "GAM"
# propsc.form.true  = "A ~ s(X1) + s(X2) + s(X3)"
# w                 = cbind(1, data.used.cont.cont[, 3:5])
# propsc.mod.insplt = NULL
final.tree.estipw.gam.propscout.true.cv1 <- EstIpw.CvMethod1(data.used         = data.used.cont.cont,
tree.list         = seq.created.estipw.gam.propscout.true$tree.list,
lambda.used       = 4,
val.sample        = data.validation.cont.cont,
type.var          = "cont",
propsc.mod.out    = T,
propsc.mthd       = "GAM",
propsc.form.true  = "A ~ X1 + X2 + X3",
val.w             = cbind(1, data.validation.cont.cont[, 3:5]),
propsc.mod.insplt = NULL,
min.obs.mod       = NULL)
t1 <- Sys.time()
eval.final.estipw.gam.propscout.true.cv1 <- eval.measures.eff(final.tree   = final.tree.estipw.gam.propscout.true.cv1[[1]],
test.data    = data.cont.cont$test.data,
true.trt.eff = data.cont.cont$true.trt.eff,
noise.var    = data.cont.cont$noise.var,
corr.split   = data.cont.cont$corr.split)
eval.final.estipw.gam.propscout.true.cv1$t <- as.numeric(difftime(t1, t0, units = "secs"))
eval.final.estipw.gam.propscout.true.cv1
final.tree.estipw.gam.propscout.true.cv1
t0 <- Sys.time()
seq.created.estipw.gam.propscinnd.true <- create.sequence(data.used         = data.used.cont.cont,
est.used          = "IPW",
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GAM",
propsc.form.true  = "A ~ s(X1) + s(X2) + s(X3)",
w                 = cbind(1, data.used.cont.cont[, 3:5]),
propsc.mod.insplt = F,
num.truc.obs      = 30,
min.node          = 20)
# numtrees.ipw.gam.propscinnd.true <- length(seq.created.estipw.gam.propscinnd.true$tree.list)
#
# data.used         = data.used.cont.cont
# est.used          = "IPW"
# type.var          = "cont"
# propsc.mod.out    = F
# propsc.mthd       = "GAM"
# propsc.form.true  = "A ~ s(X1) + s(X2) + s(X3)"
# w                 = cbind(1, data.used.cont.cont[, 3:5])
# propsc.mod.insplt = F
final.tree.estipw.gam.propscinnd.true.cv1 <- EstIpw.CvMethod1(data.used         = data.used.cont.cont,
tree.list         = seq.created.estipw.gam.propscinnd.true$tree.list,
lambda.used       = 4,
val.sample        = data.validation.cont.cont,
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GAM",
propsc.form.true  = "A ~ X1 + X2 + X3",
val.w             = cbind(1, data.validation.cont.cont[, 3:5]),
propsc.mod.insplt = F,
min.obs.mod       = 10)
t1 <- Sys.time()
final.tree.estipw.gam.propscinnd.true.cv1 <- EstIpw.CvMethod1(data.used         = data.used.cont.cont,
tree.list         = seq.created.estipw.gam.propscinnd.true$tree.list,
lambda.used       = 4,
val.sample        = data.validation.cont.cont,
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GAM",
propsc.form.true  = "A ~ X1 + X2 + X3",
val.w             = cbind(1, data.validation.cont.cont[, 3:5]),
propsc.mod.insplt = F,
min.obs.mod       = 5)
final.tree.estipw.gam.propscinnd.true.cv1 <- EstIpw.CvMethod1(data.used         = data.used.cont.cont,
tree.list         = seq.created.estipw.gam.propscinnd.true$tree.list,
lambda.used       = 4,
val.sample        = data.validation.cont.cont,
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GAM",
propsc.form.true  = "A ~ X1 + X2 + X3",
val.w             = cbind(1, data.validation.cont.cont[, 3:5]),
propsc.mod.insplt = F,
min.obs.mod       = 4)
eval.final.estipw.gam.propscinnd.true.cv1 <- eval.measures.eff(final.tree   = final.tree.estipw.gam.propscinnd.true.cv1[[1]],
test.data    = data.cont.cont$test.data,
true.trt.eff = data.cont.cont$true.trt.eff,
noise.var    = data.cont.cont$noise.var,
corr.split   = data.cont.cont$corr.split)
eval.final.estipw.gam.propscinnd.true.cv1$t <- as.numeric(difftime(t1, t0, units = "secs"))
eval.final.estipw.gam.propscinnd.true.cv1
seq.created.estipw.gam.propscinnd.true
seq.created.estipw.gam.propscinsplt.true <- create.sequence(data.used         = data.used.cont.cont,
est.used          = "IPW",
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GAM",
propsc.form.true  = "A ~ s(X1) + s(X2) + s(X3)",
w                 = cbind(1, data.used.cont.cont[, 3:5]),
propsc.mod.insplt = T,
num.truc.obs      = 30,
min.node          = 20)
View(val.sample.noy)
est.prop.sc(df.noy    = val.sample.noy[1:10, 1:7],
method    = "GAM",
form.true = "A ~ X1 + X2 + X3")
est.prop.sc(df.noy    = val.sample.noy[1:5, 1:7],
method    = "GAM",
form.true = "A ~ X1 + X2 + X3")
est.prop.sc(df.noy    = val.sample.noy[1:3, 1:7],
method    = "GAM",
form.true = "A ~ X1 + X2 + X3")
est.prop.sc(df.noy    = val.sample.noy[1:4, 1:7],
method    = "GAM",
form.true = "A ~ X1 + X2 + X3")
est.prop.sc(df.noy    = val.sample.noy[1:5, 1:7],
method    = "GAM",
form.true = NULL)
est.prop.sc(df.noy    = val.sample.noy[1:7, 1:7],
method    = "GAM",
form.true = NULL)
est.prop.sc(df.noy    = val.sample.noy[1:10, 1:7],
method    = "GAM",
form.true = NULL)
est.prop.sc(df.noy    = val.sample.noy[1:20, 1:7],
method    = "GAM",
form.true = NULL)
est.prop.sc(df.noy    = val.sample.noy[1:40, 1:7],
method    = "GAM",
form.true = NULL)
est.prop.sc(df.noy    = val.sample.noy[1:10, 1:7],
method    = "GAM",
form.true = "A ~ s(X1) + s(X2) + s(X3)")
est.prop.sc(df.noy    = val.sample.noy[1:20, 1:7],
method    = "GAM",
form.true = "A ~ s(X1) + s(X2) + s(X3)")
est.prop.sc(df.noy    = val.sample.noy[1:30, 1:7],
method    = "GAM",
form.true = "A ~ s(X1) + s(X2) + s(X3)")
est.prop.sc(df.noy    = val.sample.noy[1:50, 1:7],
method    = "GAM",
form.true = NULL)
est.prop.sc(df.noy    = val.sample.noy[1:60, 1:7],
method    = "GAM",
form.true = NULL)
est.prop.sc(df.noy    = val.sample.noy[1:7, 1:7],
method    = "GLM",
form.true = NULL)
est.prop.sc(df.noy    = val.sample.noy[1:6, 1:7],
method    = "GLM",
form.true = NULL)
est.prop.sc(df.noy    = val.sample.noy[1:5, 1:7],
method    = "GLM",
form.true = NULL)
est.prop.sc(df.noy    = val.sample.noy[1:2, 1:7],
method    = "GLM",
form.true = NULL)
est.prop.sc(df.noy    = val.sample.noy[1:10, 1:7],
method    = "GLM",
form.true = NULL)
?rpart
seq.created.estipw.gam.propscinsplt.true <- create.sequence(data.used         = data.used.cont.cont,
est.used          = "IPW",
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GAM",
propsc.form.true  = "A ~ s(X1) + s(X2) + s(X3)",
w                 = cbind(1, data.used.cont.cont[, 3:5]),
propsc.mod.insplt = T,
num.truc.obs      = 30,
min.node          = 20)
warnings()
final.tree.estipw.gam.propscinnd.true.cv1
eval.final.estipw.gam.propscinnd.true.cv1
seq.created.estipw.gam.propscinsplt.true <- create.sequence(data.used         = data.used.cont.cont,
est.used          = "IPW",
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GAM",
propsc.form.true  = "A ~ s(X1) + s(X2) + s(X3)",
w                 = cbind(1, data.used.cont.cont[, 3:5]),
propsc.mod.insplt = T,
num.truc.obs      = 30,
min.node          = 30)
seq.created.estipw.gam.propscinnd.true <- create.sequence(data.used         = data.used.cont.cont,
est.used          = "IPW",
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GAM",
propsc.form.true  = "A ~ s(X1) + s(X2) + s(X3)",
w                 = cbind(1, data.used.cont.cont[, 3:5]),
propsc.mod.insplt = F,
num.truc.obs      = 30,
min.node          = 30)
seq.created.estipw.gam.propscinnd.true
final.tree.estipw.gam.propscinnd.true.cv1 <- EstIpw.CvMethod1(data.used         = data.used.cont.cont,
tree.list         = seq.created.estipw.gam.propscinnd.true$tree.list,
lambda.used       = 4,
val.sample        = data.validation.cont.cont,
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GAM",
propsc.form.true  = "A ~ s(X1) + s(X2) + s(X3)",
val.w             = cbind(1, data.validation.cont.cont[, 3:5]),
propsc.mod.insplt = F,
min.obs.mod       = 30)
eval.final.estipw.gam.propscinnd.true.cv1 <- eval.measures.eff(final.tree   = final.tree.estipw.gam.propscinnd.true.cv1[[1]],
test.data    = data.cont.cont$test.data,
true.trt.eff = data.cont.cont$true.trt.eff,
noise.var    = data.cont.cont$noise.var,
corr.split   = data.cont.cont$corr.split)
eval.final.estipw.gam.propscinnd.true.cv1
seq.created.estipw.gam.propscinsplt.true <- create.sequence(data.used         = data.used.cont.cont,
est.used          = "IPW",
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "GAM",
propsc.form.true  = "A ~ s(X1) + s(X2) + s(X3)",
w                 = cbind(1, data.used.cont.cont[, 3:5]),
propsc.mod.insplt = T,
num.truc.obs      = 30,
min.node          = 30)
View(e.bb.l)
View(data.used.cont.cont)
View(val.sample.noy)
View(val.sample.used)
View(val.w.used.left)
est.prop.sc(val.sample.noy[5, 1:7], method = "RF", form.true = NULL)
est.prop.sc(val.sample.noy[1:5, 1:7], method = "RF", form.true = NULL)
est.prop.sc(val.sample.noy[1:7, 1:7], method = "RF", form.true = NULL)
est.prop.sc(val.sample.noy[1:10, 1:7], method = "RF", form.true = NULL)
est.prop.sc(val.sample.noy[1:10, 1:7], method = "RF", form.true = "A ~ X1 + X2 + X3")
est.prop.sc(val.sample.noy[1:5, 1:7], method = "RF", form.true = "A ~ X1 + X2 + X3")
est.prop.sc(val.sample.noy[1:6, 1:7], method = "RF", form.true = "A ~ X1 + X2 + X3")
est.prop.sc(val.sample.noy[1:7, 1:7], method = "RF", form.true = "A ~ X1 + X2 + X3")
est.prop.sc(val.sample.noy[1:10, 1:7], method = "RF", form.true = "A ~ X1 + X2 + X3")
?rfsrc
est.prop.sc(val.sample.noy[1:10, 1:7], method = "RF", form.true = NULL)
est.prop.sc(val.sample.noy[1:10, 1:7], method = "RF", form.true = NULL)
est.prop.sc(val.sample.noy[1:10, 1:7], method = "RF", form.true = NULL)
est.prop.sc(val.sample.noy[1:10, 1:7], method = "RF", form.true = "A ~ X1 + X2 + X3")
est.prop.sc(val.sample.noy[1:10, 1:7], method = "RF", form.true = "A ~ X1 + X2 + X3")
seq.created.estipw.rf.propscout.true <- create.sequence(data.used         = data.used.cont.cont,
est.used          = "IPW",
type.var          = "cont",
propsc.mod.out    = T,
propsc.mthd       = "RF",
propsc.form.true  = "A ~ X1 + X2 + X3",
w                 = cbind(1, data.used.cont.cont[, 3:5]),
propsc.mod.insplt = NULL,
num.truc.obs      = 30,
min.node          = 20)
final.tree.estipw.rf.propscout.true.cv1 <- EstIpw.CvMethod1(data.used         = data.used.cont.cont,
tree.list         = seq.created.estipw.rf.propscout.true$tree.list,
lambda.used       = 4,
val.sample        = data.validation.cont.cont,
type.var          = "cont",
propsc.mod.out    = T,
propsc.mthd       = "RF",
propsc.form.true  = "A ~ X1 + X2 + X3",
val.w             = cbind(1, data.validation.cont.cont[, 3:5]),
propsc.mod.insplt = NULL,
min.obs.mod       = NULL)
seq.created.estipw.rf.propscinnd.true <- create.sequence(data.used         = data.used.cont.cont,
est.used          = "IPW",
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "RF",
propsc.form.true  = "A ~ X1 + X2 + X3",
w                 = cbind(1, data.used.cont.cont[, 3:5]),
propsc.mod.insplt = F,
num.truc.obs      = 30,
min.node          = 20)
final.tree.estipw.rf.propscinnd.true.cv1 <- EstIpw.CvMethod1(data.used         = data.used.cont.cont,
tree.list         = seq.created.estipw.rf.propscinnd.true$tree.list,
lambda.used       = 4,
val.sample        = data.validation.cont.cont,
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "RF",
propsc.form.true  = "A ~ X1 + X2 + X3",
val.w             = cbind(1, data.validation.cont.cont[, 3:5]),
propsc.mod.insplt = F,
min.obs.mod       = 10)
final.tree.estipw.rf.propscinnd.true.cv1
eval.final.estipw.rf.propscinnd.true.cv1 <- eval.measures.eff(final.tree   = final.tree.estipw.rf.propscinnd.true.cv1[[1]],
test.data    = data.cont.cont$test.data,
true.trt.eff = data.cont.cont$true.trt.eff,
noise.var    = data.cont.cont$noise.var,
corr.split   = data.cont.cont$corr.split)
eval.final.estipw.rf.propscinnd.true.cv1
seq.created.estipw.rf.propscinnd.mis <- create.sequence(data.used         = data.used.cont.cont,
est.used          = "IPW",
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "RF",
propsc.form.true  = NULL,
w                 = NULL,
propsc.mod.insplt = F,
num.truc.obs      = 30,
min.node          = 20)
final.tree.estipw.rf.propscinnd.mis.cv1 <- EstIpw.CvMethod1(data.used         = data.used.cont.cont,
tree.list         = seq.created.estipw.rf.propscinnd.mis$tree.list,
lambda.used       = 4,
val.sample        = data.validation.cont.cont,
type.var          = "cont",
propsc.mod.out    = F,
propsc.mthd       = "RF",
propsc.form.true  = NULL,
val.w             = NULL,
propsc.mod.insplt = F,
min.obs.mod       = 10)
eval.final.estipw.rf.propscinnd.mis.cv1 <- eval.measures.eff(final.tree   = final.tree.estipw.rf.propscinnd.mis.cv1[[1]],
test.data    = data.cont.cont$test.data,
true.trt.eff = data.cont.cont$true.trt.eff,
noise.var    = data.cont.cont$noise.var,
corr.split   = data.cont.cont$corr.split)
eval.final.estipw.rf.propscinnd.mis.cv1
final.tree.estipw.rf.propscinnd.mis.cv1
final.tree.estipw.glm.propscinnd.true.cv1
final.tree.estipw.rf.propscinnd.mis.cv1
tmp <- list(final.tree.estipw.gam.propscinnd.true.cv1, final.tree.estipw.glm.propscinnd.mis.cv1)
tmp
tmp <- list(tree1 = final.tree.estipw.gam.propscinnd.true.cv1, tree2 = final.tree.estipw.glm.propscinnd.mis.cv1)
tmp
tmp$tree1
tmp$tree1[[1]]
tmp$tree1[[2]]
tmp$tree1[[2]][1]
print(names(eval.final.estipw.gam.propscinnd.true.cv1))
print(as.character(eval.final.estipw.gam.propscinnd.true.cv1))
deparse(substitute(eval.final.estipw.glm.propscout.true.cv1))
eval.final.estipw.glm.propscout.true.cv1
print("1. ipw: GLM Model, outside node, True propensity score model")
print("2")
print("10")
N = 1000
p = 6
coeff.prop.sc=0.6
# Covariates
# p columns of continuous X
sgm <- diag(p)
sgm <- sgm + 0.3
sgm <- sgm - diag(p) * 0.3
X <- mvrnorm(N, mu = rep(0, p), Sigma = sgm)
X <- data.frame(X)
if (!require(MASS)) {install.packages("MASS"); library(MASS)}
if (!require(dplyr)) {install.packages("dplyr"); library(dplyr)}
if (!require(plm)) {install.packages("plm"); library(plm)}
if (!require(rpart)) {install.packages("rpart"); library(rpart)}
X <- mvrnorm(N, mu = rep(0, p), Sigma = sgm)
X <- data.frame(X)
# Treatment
# prop.sc <- 1 / (1 + exp(- 0.6 * X[, 1] + 0.6 * X[, 2] - 0.6 * X[, 3]))
prop.sc <- 1 / (1 + exp(- coeff.prop.sc * X[, 1] + coeff.prop.sc * X[, 2] - coeff.prop.sc * X[, 3]))
A <- rbinom(N, 1, prop.sc)
hist(prop.sc)
range(prop.sc)
175.5+7.02+18.87+1.76
203.15*5
203.15*5、3
203.15*5/3
572-338.58
572 - 1015.75/3
1142.8/2
1015.75/3
1015.75/3 - 223.42
1015.75-572-115.16
398.6+338.58
398.6+338.58-650
398.6+338.58-650 + 100
